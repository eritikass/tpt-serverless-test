{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["cfd","initState","int","App","React","useState","state","setState","loading","setLoading","setTimeout","CanvasFreeDrawing","elementId","width","height","setLineWidth","setStrokeColor","on","event","notInitState","className","src","alt","style","apiAns","onClick","clear","undo","id","axios","post","save","headers","then","data","text","catch","err","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+SAMIA,EAAM,MACJC,EAAY,CAAEC,IAAK,QAqEVC,MApEf,WAEE,IAFa,EA0BaC,IAAMC,SAASJ,GA1B5B,mBA0BNK,EA1BM,KA0BCC,EA1BD,OA2BiBH,IAAMC,UAAS,GA3BhC,mBA2BNG,EA3BM,KA2BGC,EA3BH,KAiDb,OApBIH,IAAUL,GACZS,YAAW,YACTV,EAAM,IAAIW,IAAkB,CAC1BC,UAAW,MACXC,MAAO,IACPC,OAAQ,OAINC,aAAa,GACjBf,EAAIgB,eAAe,CAAC,EAAG,EAAG,IAG1BhB,EAAIiB,GAAG,CAAEC,MAAO,WAAY,eAG5BX,EAAS,CAAEY,cAAc,MACxB,KAIH,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,uBAAGA,UAAU,iBAAb,8FACA,yBAAKC,IAAI,aAAaC,IAAI,QAAQF,UAAU,OAAOG,MAAO,CAACV,MAAO,WACjEL,EAAU,UAAYF,EAAMkB,OAASlB,EAAMkB,OAAS,eACrD,yBAAKJ,UAAU,OACb,4BAAQA,UAAU,2EAA2EK,QAjCvF,WACZzB,EAAI0B,UAgCE,SACA,4BAAQN,UAAU,2EAA2EK,QAtCxF,WACXzB,EAAI2B,SAqCE,SAEF,yBAAKP,UAAU,4CACb,4BAAQQ,GAAG,SAEb,4BAAQH,QA5DE,WAEdhB,GAAW,GACXoB,IAAMC,KAAK,mEAAoE9B,EAAI+B,OAAQ,CACzFC,QAAS,CACP,eAAgB,gBAGjBC,MAAK,SAAAC,GACJ3B,EAAS,CAAEY,cAAc,EAAMK,OAAQU,EAAKA,KAAKC,OACjD1B,GAAW,MAEZ2B,OAAM,SAAAC,GACLC,QAAQC,IAAIF,OA+CcjB,UAAU,uFAAuFZ,EAAU,UAAY,cC1DrIgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAmB,GACLjB,QAAQiB,MAAMA,EAAMC,c","file":"static/js/main.438f4b07.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport './output.css'\r\nimport CanvasFreeDrawing from \"canvas-free-drawing\";\r\nimport axios from 'axios';\r\n\r\nlet cfd = \"asd\";\r\nconst initState = { int: \"init\" };\r\nfunction App() {\r\n\r\n  const sendImg = () => {\r\n    // console.log(state.cfd.save());\r\n    setLoading(true);\r\n    axios.post('https://6fq1iharw4.execute-api.us-east-1.amazonaws.com/dev/image', cfd.save(), {\r\n      headers: {\r\n        'content-type': 'text/plain'\r\n      }\r\n    })\r\n      .then(data => {\r\n        setState({ notInitState: true, apiAns: data.data.text });\r\n        setLoading(false)\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }\r\n\r\n  const undo = () => {\r\n    cfd.undo();\r\n  }\r\n\r\n  const clear = () => {\r\n    cfd.clear();\r\n  }\r\n  const [state, setState] = React.useState(initState);\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n  if (state === initState) {\r\n    setTimeout(() => {\r\n      cfd = new CanvasFreeDrawing({\r\n        elementId: 'cfd',\r\n        width: 700,\r\n        height: 500,\r\n      });\r\n\r\n      // set properties\r\n      cfd.setLineWidth(7); // in px\r\n      cfd.setStrokeColor([0, 0, 0]); // in RGB\r\n\r\n      // listen to events\r\n      cfd.on({ event: 'redraw' }, () => {\r\n        // code...\r\n      });\r\n      setState({ notInitState: true });\r\n    }, 1000);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <p className=\"text-xl px-40\">For best results write your numbers and symbols in a font like this (the AI is very picky)</p>\r\n        <img src=\"./font.png\" alt=\"fonts\" className=\"mt-1\" style={{width: \"30rem\"}}/>\r\n        {loading ? \"Loading\" : state.apiAns ? state.apiAns : \"No input yet\"}\r\n        <div className=\"m-1\">\r\n          <button className=\"inline-block mx-2 text-xl p-1 rounded bg-blue-800 border border-blue-600\" onClick={clear}>Clear</button>\r\n          <button className=\"inline-block mx-2 text-xl p-1 rounded bg-blue-800 border border-blue-600\" onClick={undo}>Undo</button>\r\n        </div>\r\n        <div className=\"border-2 border-green-100-500 rounded-lg\">\r\n          <canvas id=\"cfd\"></canvas>\r\n        </div>\r\n        <button onClick={sendImg} className=\"p-2 border-2 w-48 mt-2 border-gray-100 rounded-md bg-gray-700 hover:border-gray-300\">{loading ? \"Loading\" : \"Get img\"}</button>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}